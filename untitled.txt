# Programmation Orientée Objet (POO)

La Programmation Orientée Objet (POO) est un paradigme de programmation qui organise le code autour d'objets, qui représentent des entités du monde réel ou des concepts abstraits. En POO, les objets sont définis par des **classes** et peuvent interagir entre eux par l'intermédiaire de **méthodes** et d'**attributs**. Ce modèle est particulièrement efficace pour structurer et réutiliser du code dans des applications complexes.

```{admonition} Définition : Objets et Classes
- **Objet** : Un objet est une instance d'une classe. Il possède des caractéristiques (attributs) et des comportements (méthodes). 
- **Classe** : Une classe est un modèle ou un plan de conception qui définit les attributs et les méthodes que ses objets auront.
```

## Les Concepts Clés de la Programmation Orientée Objet

La POO repose sur quatre concepts fondamentaux : l'**encapsulation**, l'**héritage**, le **polymorphisme**, et l'**abstraction**. Ces concepts permettent de concevoir des systèmes modulaires, maintenables et extensibles.

---

## Encapsulation

L'encapsulation consiste à regrouper les attributs (données) et les méthodes (fonctions) d'un objet dans une même entité (la classe) et à restreindre l'accès direct à certaines parties de cette entité.

```{admonition} Définition : Encapsulation
L'encapsulation permet de contrôler l'accès aux attributs et méthodes d'un objet en les rendant privés (`private`). L'accès est alors limité et se fait par des méthodes publiques (getters et setters) qui permettent de consulter ou de modifier ces attributs de manière sécurisée.
```

```{admonition} Exemple
Imaginons une classe **CompteBancaire** où l'attribut `solde` est encapsulé. Au lieu d'accéder directement à `solde`, l’utilisateur doit utiliser des méthodes telles que `getSolde()` pour consulter le solde et `deposer()` ou `retirer()` pour modifier le solde. Cela garantit que le solde ne peut pas être directement modifié de manière incontrôlée.
```

```{admonition} Remarque
L'encapsulation renforce la sécurité et la robustesse d'une application en empêchant l'accès non autorisé et en contrôlant les modifications des attributs sensibles.
```

---

## Héritage

L'héritage permet de créer une nouvelle classe basée sur une classe existante. La nouvelle classe, appelée **classe dérivée** ou **classe enfant**, hérite des attributs et méthodes de la **classe parente**, tout en pouvant ajouter ses propres caractéristiques.

```{admonition} Définition : Héritage
L'héritage est un mécanisme qui permet à une classe d'hériter des attributs et des méthodes d'une autre classe. Il favorise la réutilisation du code et facilite l'extension des fonctionnalités d'une classe existante sans la modifier directement.
```

```{admonition} Exemple
Imaginons une classe **Animal** avec des attributs généraux tels que `nom` et `age`. En créant une classe **Chien** qui hérite de **Animal**, la classe **Chien** obtient automatiquement les attributs et méthodes de **Animal**, et peut ajouter des caractéristiques spécifiques comme `aboyer()`.
```

```{admonition} Remarque
L’héritage permet de structurer les applications en définissant des hiérarchies de classes, mais il doit être utilisé judicieusement pour éviter une hiérarchie trop complexe qui peut devenir difficile à maintenir.
```

---

## Polymorphisme

Le polymorphisme permet à des objets de classes différentes d'être traités de manière interchangeable, en fonction de leur relation d'héritage. Il permet de redéfinir des méthodes dans des classes dérivées et de sélectionner la méthode appropriée à exécuter selon le type de l'objet.

```{admonition} Définition : Polymorphisme
Le polymorphisme signifie "plusieurs formes". Il permet à une même méthode d’avoir des comportements différents selon l'objet qui l'implémente, ou à une variable de représenter des objets de classes liées par héritage.
```

```{admonition} Exemple
Dans une hiérarchie de classes avec une classe parente **Animal** et des classes enfants **Chien** et **Chat**, chaque classe peut redéfinir une méthode commune `faireDuBruit()`. Lorsqu'on appelle `faireDuBruit()` sur une référence d'**Animal**, le bruit spécifique à l’animal (aboiement pour le chien, miaulement pour le chat) est émis en fonction de la classe réelle de l'objet.
```

```{admonition} Remarque
Le polymorphisme simplifie le code en permettant de traiter différents objets de manière uniforme, tout en laissant chaque objet définir son propre comportement.
```

---

## Abstraction

L'abstraction consiste à ne montrer que les détails essentiels d'une entité et à masquer les détails de son implémentation. Cela permet de concevoir des interfaces ou des classes abstraites pour définir des méthodes sans en spécifier le contenu exact, qui sera implémenté dans les classes dérivées.

```{admonition} Définition : Abstraction
L'abstraction est le processus de simplification d'un système en se concentrant sur ses aspects essentiels. En POO, elle est souvent réalisée par le biais des classes abstraites ou des interfaces, qui définissent un ensemble de méthodes sans implémentation.
```

```{admonition} Exemple
Imaginons une interface **Forme** avec une méthode `calculerSurface()`. Les classes **Cercle** et **Rectangle** implémentent cette interface et fournissent leur propre version de `calculerSurface()`. Cela permet d'utiliser l'interface **Forme** pour manipuler des formes géométriques sans se soucier du type de forme exact.
```

```{admonition} Remarque
L'abstraction favorise la flexibilité et la modularité en permettant aux classes de se concentrer sur les fonctionnalités essentielles tout en laissant les détails d'implémentation aux classes spécifiques.
```

---

## Avantages de la Programmation Orientée Objet

La POO offre plusieurs avantages, en particulier pour les projets de grande envergure où la modularité, la réutilisabilité et la maintenance du code sont essentielles.

```{admonition} Avantages
1. **Modularité** : Les objets permettent de diviser le programme en parties indépendantes et modulaires.
2. **Réutilisabilité** : L'héritage et le polymorphisme facilitent la réutilisation du code existant.
3. **Maintenance** : L'encapsulation et l'organisation en objets rendent le code plus facile à maintenir et à déboguer.
4. **Extensibilité** : La POO permet d’ajouter de nouvelles fonctionnalités avec un minimum d'impact sur le code existant.
```

## Exemples Concrets d'Applications en POO

```{admonition} Exemple d'Application : Système de Gestion Bancaire
Dans un système bancaire, les classes pourraient inclure **CompteBancaire**, **Client**, et **Transaction**. Chaque classe encapsule ses attributs et ses méthodes propres, comme `deposer()` et `retirer()` pour **CompteBancaire**. Les clients ayant différents types de comptes peuvent être créés en héritant de la classe **CompteBancaire** (par exemple, **CompteEpargne** ou **CompteCourant**).
```

```{admonition} Exemple d'Application : Application de Gestion de Bibliothèque
Dans une application de bibliothèque, les classes pourraient inclure **Livre**, **Membre**, et **Emprunt**. **Livre** pourrait encapsuler des attributs comme `titre` et `auteur`, et les classes dérivées **LivreNumerique** et **LivrePapier** pourraient être créées pour gérer les différents types de livres.
```

```{admonition} Remarque
Ces exemples montrent comment la POO permet de modéliser des systèmes complexes en structurant le code de manière organisée et évolutive.
```

La POO est donc une approche puissante pour concevoir des logiciels complexes et modulaires, facilitant la gestion et l'évolution des programmes au fur et à mesure des besoins.









## Packages en Java

Les packages permettent d'organiser les classes en modules logiques.

```{admonition} Organisation des Packages
- Structure hiérarchique (`com.entreprise.projet.module`)
- Regroupement des classes liées fonctionnellement
```

La gestion des packages permet :
- Une organisation claire du code.
- La résolution des conflits de noms.
- Un contrôle de la visibilité.
```